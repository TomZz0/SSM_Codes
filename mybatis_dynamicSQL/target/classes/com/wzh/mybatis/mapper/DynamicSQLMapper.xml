<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wzh.mybatis.mapper.DynamicSQLMapper">
    <!--
            动态SQL
            1. if标签 通过test属性中的表达式判断内容是否有效 并决定是否拼接到where筛选条件中
            2. where标签 满足条件动态生成where 若全不满足则不会生成where
             而且能将if标签中的语句前边的多余的and去除 不能去除后边的and
            3. trim标签 中有四个属性 去除先后的字段 前后增加字段
            prefix="" 在前边增加字段 suffixOverrides=""去除后边多余的字段
            这样就可以根据and的位置使用不同属性修正sql语句的where和and 规范其语法
            4. ChooseWhenOtherwise类似if else when只会执行一个
            when至少设置一个 otherwise至少设置一个
            5. foreach
            collection:设置要循环的数组或集合
            item:单次循环的对象或变量
            separator:分隔符 带有前后空格
            open:循环的前置符号 即开始
            close:结束符号
            6.sql标签 记录一些sql字段
            <sql id="empColumns">
                emp_id,emp_name,age,gender,dept_id
            </sql>使用时<include refid="empColumns"></include>
    -->
    <sql id="empColumns">
    emp_id,emp_name,age,gender,dept_id
</sql>

    <!--    List<Emp> getEmpByCondition(Emp emp)
            如果第一个条件不满足而后边的条件满足 则where关键词后边或紧跟and 语法错误
            如果条件都不满足则会多出一个where
            解决方案一: 在where后边加上一个恒成立条件 比如1=1
            解决方案二: 使用where标签
            解决方案三: 使用trim标签
            解决方案四: 使用ChooseWhenOtherwise
    ;-->
    <select id="getEmpByCondition" resultType="Emp">
        select * from t_emp where
        <choose>
            <when test="empName != null and empName != ''">
                 emp_name = #{empName}
            </when>
            <when test="age != null and empName != ''">
                  age = #{age}
            </when>
            <when test="gender != null and empName != ''">
                 gender = #{gender}
            </when>
            <otherwise>

            </otherwise>
        </choose>
    </select>


    <!--    List<Emp> getEmpByChoose(Emp emp);-->
    <select id="getEmpByChoose" resultType="Emp">
        select <include refid="empColumns"></include> from t_emp where
        <choose>
            <when test="empName != null and empName != ''">
                emp_name = #{empName}
            </when>
            <when test="age != null and empName != ''">
                age = #{age}
            </when>
            <when test="gender != null and empName != ''">
                gender = #{gender}
            </when>
        </choose>
    </select>

    <!--    void insertEmps(List<Emp> emps);
            使用foreach添加多组数据 separator表示分隔符
    -->
    <insert id="insertEmps">
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null ,#{emp.empName},#{emp.age},#{emp.gender},null)
        </foreach>
    </insert>

    <!--
            使用foreach批量删除 注意使用in 在in内用逗号分隔每个要删除的id
            item表示数组每个元素
            1.in() 使用标签open表示循环以什么为左边界 close表示右边界 不包括在循环里
            2.in() 在()内循环 即写出大括号 在大括号内写foreach
            3.使用where or separator(会自动加空格)
    -->
    <!--    void deleteEmps(@Param("empIds") Integer[] empIds);-->
    <delete id="deleteEmps">
        delete from t_emp where
        <foreach collection="empIds" item="empId" separator="or">
            emp_id = #{empId}
        </foreach>
        <!--        <foreach collection="empIds" item="empId" separator="," open="("-->
        <!--        close=")">-->
        <!--            #{empId}-->
        <!--        </foreach>-->
    </delete>
</mapper>