<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--扫描组件(除控制层)-->
    <context:component-scan base-package="com.wzh.ssm">
        <!--通过注解来排除扫描 expression中为全类名-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入配置文件properties-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--创建数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--配置数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--
        开启事务的注解驱动
        将通过@Transactional标识的方法或类中所有的方法进行事务管理
    -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--配置SqlSessionFactoryBean 交给spring容器就可以直接获取SqlSessionFactory对象
    使用时直接设置属性加上@Autowired注解即可
    -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--设置Mybatis的核心配置文件的路径-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--设置数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--设置包的别名-->
        <property name="typeAliasesPackage" value="com.wzh.ssm.pojo"/>
        <!--当映射文件所在包和Mapper接口所在包一致时可以不设置 是路径 不能使用. 要用/-->
        <!--<property name="mapperLocations" value="classpath:com/wzh/ssm/mapper/EmployeeMapper.xml"/>-->
    </bean>
    <!--可以通过上面配置的SqlSessionFactoryBean获取指定包下的
    Mapper接口的代理实现类对象 并交给ioc管理 就可以在Service中直接自动装配mapper接口
    同时也设置了mapper接口和映射文件的路径-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.wzh.ssm.mapper"/>
    </bean>
</beans>